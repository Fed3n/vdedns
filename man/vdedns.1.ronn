<!--
.\" Copyright (C) 2021 VirtualSquare. Project Leader: Renzo Davoli
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License,
.\" as published by the Free Software Foundation, either version 2
.\" of the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
.\" MA 02110-1301 USA.
.\"
-->

vdedns(1) -- dns proxy to enable solving of hash addresses
====


## SYNOPSYS

`vdedns` [<options> ...]


## DESCRIPTION

`vdedns` is an Internet of Threads (IoTh) enabled DNS proxy whose aim is to solve domains
according to the specifics of IPv6 Hash based addresses and One Time IP addresses

    * Hash based addresses are IPv6 addresses generated from a hash function
      of a fully qualified domain name and a base address, used to simplify
      network deployment for a system administrator.

    * One Time IP addresses are temporary IPv6 addresses generated from a hash
      function of a fully qualified domain name, a base address, a password and
      the current time, used to add a layer of security to a private service.

`vdedns` solves special domains configured as such in its configuration file
according to their specification, every other domain is directly and transparently
forwarded to one or more selected master DNS.
The proxy is completely asynchronous (poll based) and able to solve and forward 
both UDP and TCP requests.

Users can choose to run `vdedns` regularly on the kernel networking stack with
network administration rights or can also choose to run it as an IoTh process
with its own virtual networking stack. Running the proxy on its own virtual stack
requires the use of VDE utilities for both configuration and routing, but allows
the user to run it without any special permission.

In the case of Hash based addresses, a cache to enable resolution on reverse queries
towards such addresses is kept in memory during the proxy runtime.
Users have options to limit this feature to prevent possible vulnerabilities such as
stack overflow attacks or cache poisoning (see options below).


## OPTIONS
    
* `-h`, `--help`:
  Print a help message and exit.

* `-v` <level>, `--verbose` <level>:
  Set printing level. Choices are 0 for no printing, 1 for error printing,
  2 for general info printing, 3 for extensive debug printing.
  Only messages with value less than or equal to level will be printed.
  Default level value is 1.

* `-c` <path>, `--config` <path>:
  Manually set configuration file path. Default path is /usr/local/etc/vdedns.cfg 
  when program is run with suid, else it is ~/.config/vdedns.cfg

* `-L`, `--log`:
  Print to log file in `/var/log/vdedns.log` instead of standard output.

* `-p` <path>, `--pid` <path>:
  Save process pid to desired path (e.g. when daemonizing).

* `-d`, `--daemonize`:
  Run `vdedns` as a daemon.

* `-b` <address>, `--bind` <address>:
  Bind `vdedns` to target IPv4 or IPv6 address. Default is any, so binding to a loopback 
  address is stronly suggested when running the proxy for local use.

* `-a`, `--auth`:
  Limit use of `vdedns` solving to matching ip addresses in configuration file (see configuration).
  Non-authorized users will receive a DNS rejection response. As log at info level prints
  failed attempts, this can be used in combination with tools such as *fail2ban* to ban
  persistent attackers.

* `-S`, `--server`:
  Prevent request forwarding to a master DNS, making `vdedns` a non-recursive DNS server.
  In this case only configured domain,base-address pairs will be served.

* `-s`, `--stacks`:
  Run `vdedns` using networking stacks configured in configuration file (see configuration).

* `-r`, `--reverse`:
  Set reverse resolution policy for Hash based addresses.
  This sets if and how solved Hash based addresses are cached in the reverse domain table 
  for reverse resolutions.
  Options are 'never' for preventing caching at all, 'always' to never limit caching,
  'same' for caching only when the DNS query comes from the solved address itself,
  'net' for caching only when the DNS query comes from an address from the same /64 network.
  Default option is 'always', but in case of wide area usage 'same' and 'net' are 
  strongly suggested for security reasons.

* `-B` <bytes>, `--buffer` <bytes>:
  Set UDP packet max size. This is needed when dealing with requests using DNS extensions such
  as EDNS0, which might have larger packet sizes than the previous UDP standard. Default is 512 bytes.
  Suggested for extensions use is 4096 bytes.

* `-R` <seconds>, `--revtimeout` <seconds>:
  Set duration of cached entries in the reverse domain table. Default is 3600 seconds.

* `-t` <milliseconds>, `--timeout` <milliseconds>:
  Set timeout of a forwarded DNS request. At expiration the request will be either forwarded
  to the next master DNS in list or otherwise aborted. According to user latency this might
  have to be adjusted not to drop requests.
  Default is 1000 milliseconds.


## CONFIGURATION

`vdedns` behaviour heavily depends on how it is configured in its configuration file.

All possibile aspects of the configuration and its fields follow:

### DNS Servers

This *dns_servers* field takes comma separated IPv4 or IPv6 addresses which will 
be queried in succession for forwarded DNS queries.

    dns_servers = (
        "10.9.8.7",
        "abcd:ef00::",
        "1.2.3.4"
    );

### Rules

The *rules* field is divided in *hash* (hash based addresses) and *otip* (one time ip addresses).

Hash rules are taken as comma separated domain names.
A query to a base domain configured as an hash domain (i.e. mydomain.org) still returns
an unchanged base address. A query to a subdomain of an hash domain instead returns an
hashed address (i.e. hash.mydomain.org).
If a configured hash domain is a subdomain of another configured one, when parsing a query
the longest matching one takes priority.

OTIP rules are taken as objects made of mandatory *dom*, *pswd* and optional *time* fields.
The *dom* field is as above the OTIP domain name, the *pswd* field is the domain access password
and *time* is the address duration. This last field is optional, if not specified default
address duration is 32 seconds.

    rules = {
        hash = (
            "myhashdomain.org",
            "hash.domain.org",
            "another.hash.domain.org"
        );
        otip = (
            {
                dom="default.otip.org";
                pswd="password";
            },
            {
                dom="longer.otip.org";
                pswd="secret";
                time=128;
            }
        );
    };

### Records

The *records* field is a list of local domains,addresses objects which `vdedns` will 
prioritize when solving queries before forwarding.
Each object is made of a mandatory *dom* field and at least one between a *ip4*
or *ip6* field.
The *dom* field is as before a domain name, the *ip4* and *ip6* fields are a list of
comma separated addresses.

    records = (
        {
            dom="hash.domain.org";
            ip6=("2001:aaaa::12");
        },
        {
            dom="owndomain.mine";
            ip4=("42.41.40.39", "127.0.42.1");
            ip6=("fc00:ffff:dddd::");
        }
    );

### Virtual interfaces

The *vinterface* field sets which parts of `vdedns` to virtualize and how 
when using the `--stacks` option.
If *both* field is set, then both the accepting socket stack and querying socket stack use
this same configuration. Otherwise the *dns* field specifies the stack to use for the accepting
socket stack and the *query* field specifies the stack to use for the querying socket stack.
Inside the stack field *type* is the virtual networking stack to use (e.g. *vdestack*), 
the *vnl* is which virtual network locator should the stack be created on and *config* is an
`iothconf` configuration string. 
Please refer to `libioth` and `Virtual Distributed Ethernet` documentation 
for virtual networking stacks configuration.
    
    vinterface = {
        both = {
            type="vdestack";
            vnl="vde://";
            config="eth,ip=10.0.0.1/24,ip=fc00:aaaa::1/64,gw=10.0.0.254,fqdn=my.vdedns";
        };
    };

### Authorization

The *authorization* field takes address, address mask pairs to decide which addresses
should be authorized to submit queries to `vdedns` when using the `--auth` option.
The *ip* field takes an ip address and the *mask* field takes a same address type mask.

    authorization = (
        {
            ip="127.0.0.1";
            mask="255.255.255.255";
        },
        {
            ip="10.0.0.0";
            mask="255.255.255.0";
        },
        {
            ip="2001:abcd:ef00::";
            mask="ffff:ffff:ffff:ffff::"
        }
    );

## SEE ALSO

    vde_plug(1)

## AUTHOR

VirtualSquare team.
